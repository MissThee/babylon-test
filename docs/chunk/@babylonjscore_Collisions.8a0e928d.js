import{a as e,T as Z,V as M,P as N}from"./@babylonjscore_Maths.42afce42.js";import{S as W}from"./@babylonjscore_scene.b072ee35.js";import{a as D}from"./@babylonjscore_Engines.a7c830c0.js";import{V as z}from"./@babylonjscore_Buffers.c351261b.js";var x=function(){function r(){this._pickingUnavailable=!1,this.hit=!1,this.distance=0,this.pickedPoint=null,this.pickedMesh=null,this.bu=0,this.bv=0,this.faceId=-1,this.subMeshFaceId=-1,this.subMeshId=0,this.pickedSprite=null,this.thinInstanceIndex=-1,this.ray=null,this.originMesh=null,this.aimTransform=null,this.gripTransform=null}return r.prototype.getNormal=function(s,t){if(s===void 0&&(s=!1),t===void 0&&(t=!0),!this.pickedMesh||!this.pickedMesh.isVerticesDataPresent(z.NormalKind))return null;var i=this.pickedMesh.getIndices();if(!i)return null;var n;if(t){var a=this.pickedMesh.getVerticesData(z.NormalKind),l=e.FromArray(a,i[this.faceId*3]*3),c=e.FromArray(a,i[this.faceId*3+1]*3),h=e.FromArray(a,i[this.faceId*3+2]*3);l=l.scale(this.bu),c=c.scale(this.bv),h=h.scale(1-this.bu-this.bv),n=new e(l.x+c.x+h.x,l.y+c.y+h.y,l.z+c.z+h.z)}else{var m=this.pickedMesh.getVerticesData(z.PositionKind),p=e.FromArray(m,i[this.faceId*3]*3),o=e.FromArray(m,i[this.faceId*3+1]*3),_=e.FromArray(m,i[this.faceId*3+2]*3),f=p.subtract(o),d=_.subtract(o);n=e.Cross(f,d)}if(s){var v=this.pickedMesh.getWorldMatrix();this.pickedMesh.nonUniformScaling&&(Z.Matrix[0].copyFrom(v),v=Z.Matrix[0],v.setTranslationFromFloats(0,0,0),v.invert(),v.transposeToRef(Z.Matrix[1]),v=Z.Matrix[1]),n=e.TransformNormal(n,v)}return n.normalize(),n},r.prototype.getTextureCoordinates=function(){if(!this.pickedMesh||!this.pickedMesh.isVerticesDataPresent(z.UVKind))return null;var s=this.pickedMesh.getIndices();if(!s)return null;var t=this.pickedMesh.getVerticesData(z.UVKind);if(!t)return null;var i=M.FromArray(t,s[this.faceId*3]*2),n=M.FromArray(t,s[this.faceId*3+1]*2),a=M.FromArray(t,s[this.faceId*3+2]*2);return i=i.scale(this.bu),n=n.scale(this.bv),a=a.scale(1-this.bu-this.bv),new M(i.x+n.x+a.x,i.y+n.y+a.y)},r}(),E=function(){function r(s,t,i){this.bu=s,this.bv=t,this.distance=i,this.faceId=0,this.subMeshId=0}return r}(),G=function(){function r(){this._checkCollisions=!1,this._collisionMask=-1,this._collisionGroup=-1,this._surroundingMeshes=null,this._collider=null,this._oldPositionForCollisions=new e(0,0,0),this._diffPositionForCollisions=new e(0,0,0),this._collisionResponse=!0}return r}(),R=function(r,s,t,i){return!(r.x>t.x+i||t.x-i>s.x||r.y>t.y+i||t.y-i>s.y||r.z>t.z+i||t.z-i>s.z)},g=function(){var r={root:0,found:!1};return function(s,t,i,n){r.root=0,r.found=!1;var a=t*t-4*s*i;if(a<0)return r;var l=Math.sqrt(a),c=(-t-l)/(2*s),h=(-t+l)/(2*s);if(c>h){var m=h;h=c,c=m}return c>0&&c<n?(r.root=c,r.found=!0,r):(h>0&&h<n&&(r.root=h,r.found=!0),r)}}(),S=function(){function r(){this._collisionPoint=e.Zero(),this._planeIntersectionPoint=e.Zero(),this._tempVector=e.Zero(),this._tempVector2=e.Zero(),this._tempVector3=e.Zero(),this._tempVector4=e.Zero(),this._edge=e.Zero(),this._baseToVertex=e.Zero(),this._destinationPoint=e.Zero(),this._slidePlaneNormal=e.Zero(),this._displacementVector=e.Zero(),this._radius=e.One(),this._retry=0,this._basePointWorld=e.Zero(),this._velocityWorld=e.Zero(),this._normalizedVelocity=e.Zero(),this._collisionMask=-1}return Object.defineProperty(r.prototype,"collisionMask",{get:function(){return this._collisionMask},set:function(s){this._collisionMask=isNaN(s)?-1:s},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"slidePlaneNormal",{get:function(){return this._slidePlaneNormal},enumerable:!1,configurable:!0}),r.prototype._initialize=function(s,t,i){this._velocity=t,this._velocitySquaredLength=this._velocity.lengthSquared();var n=Math.sqrt(this._velocitySquaredLength);n===0||n===1?this._normalizedVelocity.copyFromFloats(t._x,t._y,t._z):t.scaleToRef(1/n,this._normalizedVelocity),this._basePoint=s,s.multiplyToRef(this._radius,this._basePointWorld),t.multiplyToRef(this._radius,this._velocityWorld),this._velocityWorldLength=this._velocityWorld.length(),this._epsilon=i,this.collisionFound=!1},r.prototype._checkPointInTriangle=function(s,t,i,n,a){t.subtractToRef(s,this._tempVector),i.subtractToRef(s,this._tempVector2),e.CrossToRef(this._tempVector,this._tempVector2,this._tempVector4);var l=e.Dot(this._tempVector4,a);return l<0||(n.subtractToRef(s,this._tempVector3),e.CrossToRef(this._tempVector2,this._tempVector3,this._tempVector4),l=e.Dot(this._tempVector4,a),l<0)?!1:(e.CrossToRef(this._tempVector3,this._tempVector,this._tempVector4),l=e.Dot(this._tempVector4,a),l>=0)},r.prototype._canDoCollision=function(s,t,i,n){var a=e.Distance(this._basePointWorld,s),l=Math.max(this._radius.x,this._radius.y,this._radius.z);return!(a>this._velocityWorldLength+l+t||!R(i,n,this._basePointWorld,this._velocityWorldLength+l))},r.prototype._testTriangle=function(s,t,i,n,a,l,c){var h,m=!1;t||(t=[]),t[s]||(t[s]=new N(0,0,0,0),t[s].copyFromPoints(i,n,a));var p=t[s];if(!(!l&&!p.isFrontFacingTo(this._normalizedVelocity,0))){var o=p.signedDistanceTo(this._basePoint),_=e.Dot(p.normal,this._velocity);if(!(r.DoubleSidedCheck&&_>1e-4)){if(_==0){if(Math.abs(o)>=1)return;m=!0,h=0}else{h=(-1-o)/_;var f=(1-o)/_;if(h>f){var d=f;f=h,h=d}if(h>1||f<0)return;h<0&&(h=0),h>1&&(h=1)}this._collisionPoint.copyFromFloats(0,0,0);var v=!1,P=1;if(m||(this._basePoint.subtractToRef(p.normal,this._planeIntersectionPoint),this._velocity.scaleToRef(h,this._tempVector),this._planeIntersectionPoint.addInPlace(this._tempVector),this._checkPointInTriangle(this._planeIntersectionPoint,i,n,a,p.normal)&&(v=!0,P=h,this._collisionPoint.copyFrom(this._planeIntersectionPoint))),!v){var V=this._velocitySquaredLength;this._basePoint.subtractToRef(i,this._tempVector);var I=2*e.Dot(this._velocity,this._tempVector),F=this._tempVector.lengthSquared()-1,u=g(V,I,F,P);u.found&&(P=u.root,v=!0,this._collisionPoint.copyFrom(i)),this._basePoint.subtractToRef(n,this._tempVector),I=2*e.Dot(this._velocity,this._tempVector),F=this._tempVector.lengthSquared()-1,u=g(V,I,F,P),u.found&&(P=u.root,v=!0,this._collisionPoint.copyFrom(n)),this._basePoint.subtractToRef(a,this._tempVector),I=2*e.Dot(this._velocity,this._tempVector),F=this._tempVector.lengthSquared()-1,u=g(V,I,F,P),u.found&&(P=u.root,v=!0,this._collisionPoint.copyFrom(a)),n.subtractToRef(i,this._edge),i.subtractToRef(this._basePoint,this._baseToVertex);var y=this._edge.lengthSquared(),b=e.Dot(this._edge,this._velocity),T=e.Dot(this._edge,this._baseToVertex);if(V=y*-this._velocitySquaredLength+b*b,I=2*(y*e.Dot(this._velocity,this._baseToVertex)-b*T),F=y*(1-this._baseToVertex.lengthSquared())+T*T,u=g(V,I,F,P),u.found){var k=(b*u.root-T)/y;k>=0&&k<=1&&(P=u.root,v=!0,this._edge.scaleInPlace(k),i.addToRef(this._edge,this._collisionPoint))}if(a.subtractToRef(n,this._edge),n.subtractToRef(this._basePoint,this._baseToVertex),y=this._edge.lengthSquared(),b=e.Dot(this._edge,this._velocity),T=e.Dot(this._edge,this._baseToVertex),V=y*-this._velocitySquaredLength+b*b,I=2*(y*e.Dot(this._velocity,this._baseToVertex)-b*T),F=y*(1-this._baseToVertex.lengthSquared())+T*T,u=g(V,I,F,P),u.found){var k=(b*u.root-T)/y;k>=0&&k<=1&&(P=u.root,v=!0,this._edge.scaleInPlace(k),n.addToRef(this._edge,this._collisionPoint))}if(i.subtractToRef(a,this._edge),a.subtractToRef(this._basePoint,this._baseToVertex),y=this._edge.lengthSquared(),b=e.Dot(this._edge,this._velocity),T=e.Dot(this._edge,this._baseToVertex),V=y*-this._velocitySquaredLength+b*b,I=2*(y*e.Dot(this._velocity,this._baseToVertex)-b*T),F=y*(1-this._baseToVertex.lengthSquared())+T*T,u=g(V,I,F,P),u.found){var k=(b*u.root-T)/y;k>=0&&k<=1&&(P=u.root,v=!0,this._edge.scaleInPlace(k),a.addToRef(this._edge,this._collisionPoint))}}if(v){var C=P*P*this._velocitySquaredLength;(!this.collisionFound||C<this._nearestDistanceSquared)&&(c.collisionResponse&&(this.intersectionPoint?this.intersectionPoint.copyFrom(this._collisionPoint):this.intersectionPoint=this._collisionPoint.clone(),this._nearestDistanceSquared=C,this._nearestDistance=Math.sqrt(C),this.collisionFound=!0),this.collidedMesh=c)}}}},r.prototype._collide=function(s,t,i,n,a,l,c,h,m,p){if(p===void 0&&(p=!1),p)if(!i||i.length===0)for(var o=0;o<t.length-2;o+=1){var _=t[o],f=t[o+1],d=t[o+2];!_||!f||!d||((m?1:0)^o%2?this._testTriangle(o,s,_,f,d,c,h):this._testTriangle(o,s,f,_,d,c,h))}else for(var o=n;o<a-2;o+=1){var v=i[o],P=i[o+1],V=i[o+2];if(V===4294967295){o+=2;continue}var _=t[v],f=t[P],d=t[V];!_||!f||!d||((m?1:0)^o%2?this._testTriangle(o,s,_,f,d,c,h):this._testTriangle(o,s,f,_,d,c,h))}else if(!i||i.length===0)for(var o=0;o<t.length;o+=3){var _=t[o],f=t[o+1],d=t[o+2];m?this._testTriangle(o,s,_,f,d,c,h):this._testTriangle(o,s,d,f,_,c,h)}else for(var o=n;o<a;o+=3){var _=t[i[o]-l],f=t[i[o+1]-l],d=t[i[o+2]-l];m?this._testTriangle(o,s,_,f,d,c,h):this._testTriangle(o,s,d,f,_,c,h)}},r.prototype._getResponse=function(s,t){s.addToRef(t,this._destinationPoint),t.scaleInPlace(this._nearestDistance/t.length()),this._basePoint.addToRef(t,s),s.subtractToRef(this.intersectionPoint,this._slidePlaneNormal),this._slidePlaneNormal.normalize(),this._slidePlaneNormal.scaleToRef(this._epsilon,this._displacementVector),s.addInPlace(this._displacementVector),this.intersectionPoint.addInPlace(this._displacementVector),this._slidePlaneNormal.scaleInPlace(N.SignedDistanceToPlaneFromPositionAndNormal(this.intersectionPoint,this._slidePlaneNormal,this._destinationPoint)),this._destinationPoint.subtractInPlace(this._slidePlaneNormal),this._destinationPoint.subtractToRef(this.intersectionPoint,t)},r.DoubleSidedCheck=!1,r}(),q=function(){function r(){this._scaledPosition=e.Zero(),this._scaledVelocity=e.Zero(),this._finalPosition=e.Zero()}return r.prototype.getNewPosition=function(s,t,i,n,a,l,c){s.divideToRef(i._radius,this._scaledPosition),t.divideToRef(i._radius,this._scaledVelocity),i.collidedMesh=null,i._retry=0,i._initialVelocity=this._scaledVelocity,i._initialPosition=this._scaledPosition,this._collideWithWorld(this._scaledPosition,this._scaledVelocity,i,n,this._finalPosition,a),this._finalPosition.multiplyInPlace(i._radius),l(c,this._finalPosition,i.collidedMesh)},r.prototype.createCollider=function(){return new S},r.prototype.init=function(s){this._scene=s},r.prototype._collideWithWorld=function(s,t,i,n,a,l){l===void 0&&(l=null);var c=D.CollisionsEpsilon*10;if(i._retry>=n){a.copyFrom(s);return}var h=l?l.collisionMask:i.collisionMask;i._initialize(s,t,c);for(var m=l&&l.surroundingMeshes||this._scene.meshes,p=0;p<m.length;p++){var o=m[p];o.isEnabled()&&o.checkCollisions&&o.subMeshes&&o!==l&&(h&o.collisionGroup)!==0&&o._checkCollision(i)}if(!i.collisionFound){s.addToRef(t,a);return}if((t.x!==0||t.y!==0||t.z!==0)&&i._getResponse(s,t),t.length()<=c){a.copyFrom(s);return}i._retry++,this._collideWithWorld(s,t,i,n,a,l)},r}();W.CollisionCoordinatorFactory=function(){return new q};export{E as I,x as P,G as _};
